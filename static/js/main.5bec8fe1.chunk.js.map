{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","className","src","alt","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","map","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTA+BeA,MA5Bf,YAAgD,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,OAClC,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKF,EAAQG,IAAKL,EAAOA,MAAOA,IACrC,sBAAKG,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BH,IAC9B,oBAAIG,UAAU,cAAd,SAA6BJ,IAM7B,mBAAGI,UAAU,iBAAb,SAA+BF,WCuChCK,G,mNA/CbC,MAAQ,CACNC,WAAY,EACZC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAACN,SAAQD,WAAU,IANvB,2C,uDASZ,WACEQ,KAAKN,c,oBAEP,WAAS,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACC,yBAASN,UAAU,YAAnB,SACKK,EACC,qBAAKL,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACGM,EAAOQ,KAAI,SAAAC,GAAK,OACjB,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVpB,KAAMmB,EAAMnB,KACZC,MAAOkB,EAAMlB,MACbC,QAASiB,EAAMjB,QACfC,OAAQgB,EAAME,oBALTF,EAAMC,e,GA9BTE,IAAMC,YCCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,e","file":"static/js/main.5bec8fe1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nfunction Movie({year, title, summary, poster}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                {/* <ul className=\"genres\">\r\n                    {genres.map( (genre, index) => (\r\n                        <li key={index} className=\"genres__genre\">{genres}</li>\r\n                    ))}\r\n                </ul> */}\r\n                <p className=\"movie__summary\">{summary}</p>        \r\n               \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired, \r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    //genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import { render } from \"@testing-library/react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoading : true,\n    movies: []\n  };\n\n  getMovies = async() => {\n    const {\n      data : {\n        data : {movies}\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({movies, isLoading:false});\n  };\n\n  componentDidMount() {\n    this.getMovies();  \n  }\n  render(){\n   const { isLoading, movies } = this.state;\n   return ( \n    <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n          ) : (\n            <div className=\"movies\">\n             { movies.map(movie => (\n              <Movie \n                key={movie.id}\n                id={movie.id} \n                year={movie.year} \n                title={movie.title} \n                summary={movie.summary} \n                poster={movie.medium_cover_image}\n//                genres={movie.genres}\n              />\n              ))}\n            </div>\n          )}\n     </section>\n    );\n  }\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n \n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('taekyung')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}